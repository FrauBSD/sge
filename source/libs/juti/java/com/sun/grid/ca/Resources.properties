#___INFO__MARK_BEGIN__#
#/*************************************************************************
# *
# *  The Contents of this file are made available subject to the terms of
# *  the Sun Industry Standards Source License Version 1.2
# *
# *  Sun Microsystems Inc., March, 2001
# *
# *
# *  Sun Industry Standards Source License Version 1.2
# *  =================================================
# *  The contents of this file are subject to the Sun Industry Standards
# *  Source License Version 1.2 (the "License"); You may not use this file
# *  except in compliance with the License. You may obtain a copy of the
# *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
# *
# *  Software provided under this License is provided on an "AS IS" basis,
# *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
# *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
# *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
# *  See the License for the specific provisions governing your rights and
# *  obligations concerning the Software.
# *
# *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
# *
# *   Copyright: 2001 by Sun Microsystems, Inc.
# *
# *   All Rights Reserved.
# *
# ************************************************************************/
#___INFO__MARK_END__
#
# Resource bunde for the com.sun.grid.ca package
#

initCAParam.country.name = country
initCAParam.country.minLen = 2
initCAParam.country.maxLen = 2
initCAParam.country.default= US
initCAParam.state.name = state
initCAParam.state.minLen = 1
initCAParam.state.maxLen = 1024
initCAParam.location.name = location
initCAParam.location.description = e.g. city
initCAParam.location.minLen = 1
initCAParam.location.maxLen = 1024
initCAParam.organisation.name = organisation
initCAParam.organisation.minLen = 1
initCAParam.organisation.maxLen = 1024
initCAParam.organisationUnit.name = organisation unit
initCAParam.organisationUnit.minLen = 1
initCAParam.organisationUnit.maxLen = 1024
initCAParam.adminEmailAddress.name = admin email address
initCAParam.adminEmailAddress.minLen = 1
initCAParam.adminEmailAddress.maxLen = 1024

initCAParam.promptWithDescription=Please enter the {0} of your CA ({1}):\ 
initCAParam.prompt=Please enter the {0} of your CA:\ 


initCAParam.empty=CA parameter {0} must not be empty
initCAParam.tooShort=CA parameter {0} is too short (need at least {2} letters)
initCAParam.tooLong=CA parameter {0} is too long (max. {2} letters)
gridCAParam.forbiddenLetter=CA parameter {0} contains an invalid charater (''{1}'')

gridCAConf.missing={0} is not set

gridCAImpl.invalidCountryCode = invalid country code ''{0}'' (need two letters)
gridCAImpl.invalidState = invalid state ''{0}'' (need at least one letter)
gridCAImpl.invalidLocation = invalid location ''{0}'' (need at least one letter)
gridCAImpl.invalidOrganization = invalid organization ''{0}'' (need at least one letter)
gridCAImpl.invalidOu=invalid organization unit ''{0}'' (need at least one letter)
gridCAImpl.invalidEmail=invalid admin mail address ''{0}'' (need at least one letter)
gridCAImpl.error.tmpFile=Can not create file in {0}: {1}
gridCAImpl.error.autoFile=Can not write auto.conf file: {0}
gridCAImpl.sge_ca.ioError=IO error while executing sge_ca: {0}
gridCAImpl.sge_ca.interrupt=Execution sge_ca has been interrupted
gridCAImpl.sge_ca.unknownError=sge_ca script with status {0}, no error message was reported
gridCAImpl.sge_ca.error=sge_ca script with status {0}: {1}
gridCAImpl.error.certFileNotFound=cert file {0} not found
gridCAImpl.error.certFileReadable=cert file {0} is not accessible
gridCAImpl.error.certFileIOError=I/O Error while reading cert file: {0}
gridCAImpl.error.certFileInvalid=cert file {0} does not contain a valid certificate: {1}
gridCAImpl.autoFileWritten=auto file successfully written
gridCAImpl.initSuccess=init command successfully executed
gridCAImpl.error.emptyKeystorePassword=need a keystore password
gridCAImpl.error.emptyPKPassword=need a private key password
gridCAImpl.error.createKS=Can not create JKS keystore: {0}
gridCAImpl.error.ksInit=Error while initializing JKS keystore: {0}
gridCAImpl.error.pkcs12.load=Error while loading pkcs12 keystore {0}: {1}
gridCAImpl.error.pkcs12.aliases=Can not get alias from pkcs12 keystore: {0}
gridCAImpl.error.pkcs12.isKeyEntry=Can not read alias {0} from keystore: {1}
gridCAImpl.error.pkcs12.getKey=Can not read private key {0} from pkcs12 keystore: {1}
gridCAImpl.error.pkcs12.getCert=Can not access certificate {0} from pkcs12 keystore: {1}
gridCAImpl.error.pkcs12.invalidCert=certificate for {0} is not a X.509 certiciate
gridCaImpl.error.pkcs12.entityNotFound=alias {0} not found in pkcs12 keystore
gridCAImpl.warn.pkcs12.delete=Can not delete pkcs12 file {0}
gridCAImpl.error.outputIO=IO error in sge_ca output handler: {0}
gridCAImpl.error.ks.setKeyEntry=Error while adding {0} to keystore: {1}
gridCAImpl.addKey=Adding key for alias {0}
gridCAImpl.error.io=IO error: {0}
gridCAImpl.error.notADaemonCert=Certificate does not belong to a daemon ({0})
gridCAImpl.error.notAUserCert=Certificate does not belong to a user ({0})
gridCAImpl.error.lockFileNotFound=Can not create lock file {0}: {1}
gridCAImpl.error.lock=Can not aquire lock on file {0}: {1}

main.usage= \n\
{0}  [options] <command>\n\
\n\
\n\
\  Commands:\n\
\n\
\n\
\    init                          initialize CA infrastructure\n\
\    create <type> <u:g:e>         generate certificates and keys for <u:g:e>\n\
\    initks <type> <name> <file> <pwfile>]\n\
\                                  get a keystore for user or a daemon. Store the\n\
\                                  keystore in <file>. Use first line of <pwfile> to\n\
\                                  crypt the keystore\n\
\    printcert <type> <name>       print certificate of a user or a daemon\n\
\    renew <type> <name> <days>    renew certificate for a user or a daemon\n\
\n\
\  Mandatory Options: \n\
\    -catop      <dir>       path to the ca root directory\n\
\    -calocaltop <dir>       path to the local ca root directory\n\
\    -cascript <script>      path to the sge_ca script\n\
\n\
\  Optional Options:\n\
\    -tmp <dir>              path tmp files (default system property java.io.tmp)\n\
\    -config <dir>           path to CA configuration files (default $cadist/util/sgeCA\n\
\    -adminuser <user>       name of the admin user (default system proeprty user.name)\n\
\    -cahost <host>          the ca host (default localhost)\n\
\n\
\  <type>   \"user\" or \"daemon\"\n\
\  <name>   For users <name> is the unix username. For daemons <name> \n\
\           is the common name\n\
\  <u:g:e>  for users u=unix username, g=common name, e=email address\n\
\           for daemons u=unix username of the process owner,\n\
\                       g=common name of the daemon, \n\
\                       e=email address of the process owner\n\
\n\

x500.fieldNotFound=Invalid grid ca certificate, {0} field not found ({1})