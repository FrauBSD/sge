/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from c_event_map.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */
<%
  com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
  com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
%>
#include <ctype.h>
#include <string.h>
#include <stdio.h>
#include <jni.h>
#include "jgdi.h"
#include "basis_types.h"
#include "cull.h"
#include "sgermon.h"
#include "sge_all_listsL.h"
#include "sge_answer.h"
#include "sge_event.h"
#include "jgdi_common.h"    
#include "jgdi_wrapper_event.h"


JNIEXPORT void JNICALL Java_com_sun_grid_jgdi_event_EventTypeMapping_nativeInit(JNIEnv *env, jclass clazz);

/*
 * Class:     com_sun_grid_jgdi_event_EventTypeMapping
 * Method:    nativeInit
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_sun_grid_jgdi_event_EventTypeMapping_nativeInit(JNIEnv *env, jclass clazz) {

    jgdi_result_t        ret = JGDI_SUCCESS;
    lList * alp = NULL;
    
    DENTER(BASIS_LAYER, "Java_com_sun_grid_jgdi_event_EventTypeMapping_nativeInit");

<%
    com.sun.grid.cull.CullObject cullObj = null;    
    for (String name : cullDef.getObjectNames()) {
      cullObj = cullDef.getCullObject(name); 
      name = cullObj.getIdlName();
//      System.out.println("name = " + name + ", cullname = " + cullObj.getName() + " " + 
//                         (cullObj.hasAddEvent() ? "A" : "") + 
//                         (cullObj.hasDeleteEvent() ? "D" : "") +
//                         (cullObj.hasGetListEvent() ? "L" : "") +
//                         (cullObj.hasGetEvent() ? "G" : "") +
//                         (cullObj.hasModifyEvent() ? "M" : ""));
      if(name == null) {
         throw new IllegalStateException("Have no idl name for " + cullObj.getName());
      }
      String notifType = null;
      String classname = null;
      if(cullObj.hasAddEvent()) {
%>
      ret = EventTypeMapping_static_registerEvent(env, "<%=name%>Add", <%=cullObj.getAddEventName()%>, &alp);
      if(ret != JGDI_SUCCESS) {
          throw_error_from_answer_list(env, ret, alp);
          DRETURN_VOID;
      }
<%    } 
      
      if(cullObj.hasDeleteEvent()) {
%>
      ret = EventTypeMapping_static_registerEvent(env, "<%=name%>Del", <%=cullObj.getDeleteEventName()%>, &alp);
      if(ret != JGDI_SUCCESS) {
          throw_error_from_answer_list(env, ret, alp);
          DRETURN_VOID;
      }
<%
      }
      if(cullObj.hasModifyEvent()) {
%>
      ret = EventTypeMapping_static_registerEvent(env, "<%=name%>Mod", <%=cullObj.getModifyEventName()%>, &alp);
      if(ret != JGDI_SUCCESS) {
          throw_error_from_answer_list(env, ret, alp);
          DRETURN_VOID;
      }
<%
      }
      if(cullObj.hasGetListEvent()) {
%>
      ret = EventTypeMapping_static_registerEvent(env, "<%=name%>List", <%=cullObj.getGetListEventName()%>, &alp);
      if(ret != JGDI_SUCCESS) {
          throw_error_from_answer_list(env, ret, alp);
          DRETURN_VOID;
      }
<%
      }
   } // end of for

   String [][] specialEvents = {
       { "QmasterGoesDown", "sgeE_QMASTER_GOES_DOWN" },
       { "SchedulerRun",    "sgeE_SCHEDDMONITOR" },
       { "Shutdown",        "sgeE_SHUTDOWN" },
       { "JobFinish",       "sgeE_JOB_FINISH" },
       { "JobUsage",        "sgeE_JOB_USAGE" },
       { "JobFinalUsage",   "sgeE_JOB_FINAL_USAGE" },
       { "JobPriorityMod",  "sgeE_JOB_MOD_SCHED_PRIORITY" },
       { "QueueInstanceSuspend", "sgeE_QINSTANCE_SOS" },
       { "QueueInstanceUnsuspend", "sgeE_QINSTANCE_USOS" }
   };

   for (int i = 0; i < specialEvents.length; i++) {

%>
      ret = EventTypeMapping_static_registerEvent(env, "<%=specialEvents[i][0]%>", <%=specialEvents[i][1]%>, &alp);
      if(ret != JGDI_SUCCESS) {
          throw_error_from_answer_list(env, ret, alp);
          DRETURN_VOID;
      }
<%
   } // end of for special events
%>
   DRETURN_VOID;
}
